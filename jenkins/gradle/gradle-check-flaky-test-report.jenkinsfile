/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@groovytest', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/Divyaasm/opensearch-build-libraries.git',
]))

pipeline {
    agent { label AGENT_LABEL }
    options {
        timeout(time: 2, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '60'))
    }
    parameters {
        string(
            name: 'GIT_REPO_URL',
            description: 'OpenSearch core repository url on git, can be either the official upstream url or your fork url.',
            defaultValue: 'https://github.com/opensearch-project/OpenSearch.git',
            trim: true
        )
        string(
            name: 'GIT_REFERENCE',
            description: 'Git branch, tag, commitid for reference to checkout commit of OpenSearch core before running the gradle check.',
            defaultValue: 'main',
            trim: true
        )
        // Must use agent with 1 executor or gradle check will show a lot of java-related errors
        // The c524xlarge is the instance type that has the least amount of errors during gradle check
        // https://github.com/opensearch-project/OpenSearch/issues/1975
        //
        // Update 20230724: Recent investigation shows gradle check is memory-bound thus switch to a new
        //                  runner of M58xlarge for more stable runs
        //                  https://github.com/opensearch-project/opensearch-ci/issues/321
        choice(
            name: 'AGENT_LABEL',
            description: 'Choose which jenkins agent to run gradle check on',
            choices: ['Jenkins-Agent-Ubuntu2404-X64-M58xlarge-Single-Host', 'Jenkins-Agent-Windows2019-X64-C524xlarge-Single-Host'],
        )
    }
//     triggers {
//         parameterizedCron '''
//             H 12 * * * %GIT_REFERENCE=main;AGENT_LABEL=Jenkins-Agent-Ubuntu2404-X64-M58xlarge-Single-Host
//         '''
//     }
    stages {
        stage('Run Gradle Check') {
            steps {
                script {

                    sh """
                        set +x
                        set -e
                        JAVA_HOME_LIST=`env | grep JAVA | grep HOME`
                        echo "JAVA_HOME_LIST \$JAVA_HOME_LIST"

                        if [ -n "\$JAVA_HOME_LIST" ] && [ "\$JAVA_HOME_LIST" != "" ]; then
                            for java_version in \$JAVA_HOME_LIST; do
                                echo \$java_version
                                java_path="`echo \$java_version | cut -d= -f2`/bin/java -version"
                                eval \$java_path
                            done
                        else
                            echo "Missing JAVA_HOME information in env vars, exit 1"
                            exit 1
                        fi
                    """
                    def agent_name_array = params.AGENT_LABEL.tokenize('-')
                    def agent_name = agent_name_array[2] + " " + agent_name_array[4]

                    println("Triggered by User or Triggered by Timer")
                    def repo_url = "${GIT_REPO_URL}".replace(".git", "/commit")
                    currentBuild.description = """runner: ${agent_name}<br>git: <a href="${GIT_REPO_URL}">${GIT_REPO_URL}</a><br>ref: <a href="${repo_url}/${GIT_REFERENCE}">${GIT_REFERENCE}</a>"""

                    runGradleCheck(
                       gitRepoUrl: "${GIT_REPO_URL}",
                       gitReference: "${GIT_REFERENCE}",
                       bwcCheckoutAlign: "false"
                    )
                }
            }
            post() {
                always {

                    junit allowEmptyResults: true, testResults: '**/build/test-results/**/*.xml'
                    script {
                        publishGradleCheckTestResults(prNumber: "null" , prTitle: "null", prOwner: "null", invokeType: "Timer", gitReference: "${GIT_REFERENCE}")
                        archiveArtifacts artifacts: 'failed-test-records.json', onlyIfFailed: true
                        sh("rm -rf *")
                        postCleanup()
                    }
                }
            }
        }
    }
    post() {
        always {
            script {
                postCleanup()
            }
        }
    }
}
